program = _{ SOI ~ chunk ~ EOI }

chunk = {
    block
}

block = {
    stmt* ~ return_statement?
}

stmt = {
  
  | module_def // | class_def

  | import_statement
  | while_statement
  | if_statement
  | assign
  | function_def
  | function_call
}

stmt_or_expr = _{ stmt | expr }

ident_list = {
    ident ~ ("," ~ ident)*
}

assign = {
    ident_list ~ "=" ~ stmt_or_expr
}

expr = {
    math_expr
  | null
  | undefined
  | boolean
  | number
  | string
  | object
  | array
  | namespace
  | ident
}

return_statement = {
    "break"
  | "continue"
  | ("return" ~ expr?)
}

function_call = {
    ((namespace | ident) ~ "(" ~ (stmt_or_expr ~ ("," ~ stmt_or_expr)*)? ~ ")")
}

function_def = {
    "fun" ~ ident ~ "(" ~ (ident_list)? ~ ")" ~ "do" ~ block ~ "end"
}

if_statement = {
    "if" ~ logic_expr ~ "do" ~ block ~ ("elseif" ~ logic_expr ~ "do" ~ block)* ~ ("else" ~ block)? ~ "end"
}

while_statement = {
    "while" ~ logic_expr ~ "do" ~ block ~ "end"
}

import_statement = {
    "import" ~ string ~ "as" ~ ident
}

// class_def = {
// "class" ~ ident ~ "do" ~ (function_def)* ~ "end"
// }

module_def = {
    "module" ~ ident ~ "do" ~ block ~ "end"
}

// values
null      =  { "null" }
undefined =  { "undefined" }
boolean   =  { "false" | "true" }
string    = ${ "\"" ~ inner ~ "\"" }
inner     = @{ char* }
char      =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
float     = @{
    "-"? ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ ~ (("e" | "E") ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
integer   = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
}
number    =  { float | integer }
object    =  {
    "{" ~ "}"
  | "{" ~ pair ~ ("," ~ pair)* ~ "}"
}
pair      =  { (string | ident) ~ ":" ~ expr }
array     =  {
    "[" ~ "]"
  | "[" ~ expr ~ ("," ~ expr)* ~ "]"
}
ident     = @{ "_"*? ~ (ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*) }
namespace =  { ident ~ ("." ~ ident)+ }

math_expr      =  { (("(" ~ math_expr ~ ")") | number | ident | namespace) ~ (math_op ~ (("(" ~ math_expr ~ ")") | number | ident | namespace))+ }
math_op        = _{ modulus | exponentiation | floor_div | add | subtract | multiply | divide }
add            =  { "+" }
subtract       =  { "-" }
multiply       =  { "*" }
divide         =  { "/" }
modulus        =  { "%" }
exponentiation =  { "**" }
floor_div      =  { "//" }

logic_expr = { (("(" ~ logic_expr ~ ")") | (not? ~ "(" ~ logic_expr ~ ")") | (not? ~ expr)) ~ ((logic_op | compare_op) ~ (("(" ~ logic_expr ~ ")") | (not? ~ "(" ~ logic_expr ~ ")") | (not? ~ expr)))* }

logic_op = _{ and | or }
and      =  { "and" | "&&" }
or       =  { "or" | "||" }
not      =  { "not" | "!" }

compare_op  = _{ greather | greather_eq | less_eq | less | equal | not_equal }
greather    =  { ">" }
greather_eq =  { ">=" }
equal       =  { "is" | "==" }
not_equal   =  { "~=" | "!=" | "<>" }
less        =  { "<" }
less_eq     =  { "<=" }

WHITESPACE = _{ " " | "\t" | "\n" }
COMMENT    = _{ ("#" ~ (!"\n" ~ ANY)*) }
